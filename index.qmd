---
title: "CIA Simulation - SudHud Transmission Line"
format: 
  html:
    toc: true
    toc-location: left
    embed-resources: true
    keep-md: true
---

## Introduction and Purpose

This document provides an analysis and simulation of the Cumulative Impact Analysis (CIA) process for clean energy projects as proposed by the Office of Environmental Justice and Equity (OEJE). The simulation focuses on the Sudbbury-Hudson underground transmission line to illustrate the steps in the CIA process and output generated. The rest of the document proceeds stepwise through the CIA process as described by OEJE. 

### Step 1. Identify Specific Geographic Area (SGA) of Project

The first step is to identify the Specific Geographic Area (SGA) of the proposed project. The SGA of a project is defined by the geographic location of the project and its physical footprint, as well as a radius around the project determined by the Energy Facilities Siting Board (EFSB). @tbl-sga below describes the radii of different energy technologies subject to review for CIA.

```{r}
#| echo: false
#| warning: false
#| label: tbl-sga

library(tidyverse)
library(kableExtra)
# create table
data.frame(Technology = c("Transmission and Distribution Lines", "Battery Energy Storage System", 
                          "Substation", "Ground-Mounted PV", 
                          "Onshore Wind Facility/ Anaerobic Digester > 25MW", "LNG Facility", 
                          "Pipeline", "Fossil Generating Facility", "Compressor Stations"),
           Radius = c("1/4 mile", "1 mile", "1/2 mile", "1/2 mile", "1 mile", "1 mile (no Air permit)<br>2 miles (non-Major Air)", "1/2 mile", "2 miles (non-Major)<br>5 miles (Major)", "1 mile (no Air permit)<br>2 miles (non-Major Air)"),
           Rationale = c("Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations")) %>% 
  kbl("html", escape = FALSE, 
      caption = "Specific Geographic Areas for CIA in EFSB Reviews", 
      col.names = c("Energy Technology", "Proposed SGA Radius", "Rationale")) %>% 
  kable_styling()
```

The Sudbury-Hudson project was an underground transmission line, which would require a 1/4 mile radius around that project.


### Step 2. Determine if SGA Overlaps with BA

To determine if the Sudbury-Hudson project is within or near a BA, we examine whether the SGA (including a buffer of the specified radius) overlaps or intersects with "Burdened Areas" (BAs) as identified by the [MassEnviroScreen tool](https://profluna.github.io/MassEnviroScreen/). @fig-sga below is an interactive map showing the transmission line, a 1/4 mile buffer, and the census block groups that intersect with that 1/4 mile buffer. The block group highlighted in red is a BA. 

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-sga

# read in libraries
pacman::p_load(sf, tigris, leaflet, leaflet.extras, leaflet.providers)
options(tigris_use_cache = TRUE)

# don't use spherical calculations
sf_use_s2(FALSE)

# load MassEnviroScreen data 
MES <- readRDS("../MassEnviroScreen/MassEnviroScreen.rds") %>% 
  replace_na(list(UBA = "No")) %>% 
  mutate(NAME2 = paste0(str_remove(NAME, ", Middlesex County"),", ", COSUB))

# Set flag for indicators that exceed statewide median, as well as median of non-UBAs, in UBAs
# Want a count of how many indicators exceed these thresholds, possibly summarized by BG, as well as by indicator
nonBA50th <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "No") %>% 
  summarize(across(c(PM25, OZONE, DSLPM, NO2, PTRAF, DWATER, CancerRisk, `Respiratory HI`, 
                     cleanup_score, gwater_score, BWPScore, SWScore, IL_count, 
                     `High blood pressure among adults`, `Coronary heart disease among adults`, 
                     `Chronic obstructive pulmonary disease among adults`, 
                     `Cancer (non-skin) or melanoma among adults`, pedAsthmaPrevalence, BLL, 
                     LBW, PMR, HSlesspctE, hhburden, limitEngpctE, povHHpctE, unemploypctE, 
                     droughtSum, WHPmean, pctFldArea, Heatmean), 
                   ~ median(.x, na.rm = TRUE)))
# Add variables with flags for those exceeding non-UBA median
MES <- MES %>% 
  mutate(nonEXPpctilePM25 = if_else(PM25 > nonBA50th[1,"PM25"], 1, 0),
         nonEXPpctileOZONE = if_else(OZONE > nonBA50th[1,"OZONE"], 1, 0),
         nonEXPpctileDSLPM = if_else(DSLPM > nonBA50th[1,"DSLPM"], 1, 0),
         nonEXPpctileNO2 = if_else(NO2 > nonBA50th[1,"NO2"], 1, 0),
         nonEXPpctilePTRAF = if_else(PTRAF > nonBA50th[1,"PTRAF"], 1, 0),
         nonEXPpctileDWATER = if_else(DWATER > nonBA50th[1,"DWATER"], 1, 0),
         nonEXPpctileCancerRisk = if_else(CancerRisk > nonBA50th[1,"CancerRisk"], 1, 0),
         nonEXPpctileRespHI = if_else(`Respiratory HI` > nonBA50th[1,"Respiratory HI"], 1, 0),
         nonEFFCTpctileCleanup = if_else(cleanup_score > nonBA50th[1,"cleanup_score"], 1, 0),
         nonEFFCTpctileGrndWater = if_else(gwater_score > nonBA50th[1,"gwater_score"], 1, 0),
         nonEFFCTpctileBWPMAJOR_PT = if_else(BWPScore > nonBA50th[1,"BWPScore"], 1, 0),
         nonEFFCTpctileSW = if_else(SWScore > nonBA50th[1,"SWScore"], 1, 0),
         nonEFFCTpctileIL = if_else(IL_count > nonBA50th[1,"IL_count"], 1, 0),
         nonSPpctileHPRSSR = if_else(`High blood pressure among adults` > nonBA50th[1,"High blood pressure among adults"], 1, 0),
         nonSPpctileHRTDIS = if_else(`Coronary heart disease among adults` > nonBA50th[1,"Coronary heart disease among adults"], 1, 0),
         nonSPpctileCOPD = if_else(`Chronic obstructive pulmonary disease among adults` > nonBA50th[1,"Chronic obstructive pulmonary disease among adults"], 1, 0),
         nonSPpctileCANCER = if_else(`Cancer (non-skin) or melanoma among adults` > nonBA50th[1,"Cancer (non-skin) or melanoma among adults"], 1, 0),
         nonSPpctileAsthmaPed = if_else(pedAsthmaPrevalence > nonBA50th[1,"pedAsthmaPrevalence"], 1, 0),
         nonSPpctileBLL = if_else(BLL > nonBA50th[1,"BLL"], 1, 0),
         nonSPpctileLBW = if_else(LBW > nonBA50th[1,"LBW"], 1, 0),
         nonSPpctilePMR = if_else(PMR > nonBA50th[1,"PMR"], 1, 0),
         nonSEpctileHS = if_else(HSlesspctE > nonBA50th[1,"HSlesspctE"], 1, 0),
         nonSEpctileHHB = if_else(hhburden > nonBA50th[1,"hhburden"], 1, 0),
         nonSEpctileLEP = if_else(limitEngpctE > nonBA50th[1,"limitEngpctE"], 1, 0),
         nonSEpctilePOV = if_else(povHHpctE > nonBA50th[1,"povHHpctE"], 1, 0),
         nonSEpctileEMP = if_else(unemploypctE > nonBA50th[1,"unemploypctE"], 1, 0),
         nonCLIMpctilDrought = if_else(droughtSum > nonBA50th[1,"droughtSum"], 1, 0),
         nonCLIMpctilWHP = if_else(WHPmean > nonBA50th[1,"WHPmean"], 1, 0),
         nonCLIMpctilFLD = if_else(pctFldArea > nonBA50th[1,"pctFldArea"], 1, 0),
         nonCLIMpctilHEAT = if_else(Heatmean > nonBA50th[1,"Heatmean"], 1, 0)) %>% 
  rowwise() %>% 
  mutate(GT_BAcntEXP = sum(c_across(starts_with("EXP")) > 50, na.rm = TRUE),
         GT_BAcntEFFCT = sum(c_across(starts_with("EFFCT")) > 50, na.rm = TRUE),
         GT_BAcntSP = sum(c_across(starts_with("SP")) > 50, na.rm = TRUE),
         GT_BAcntSE = sum(c_across(starts_with("SE")) > 50, na.rm = TRUE),
         GT_BAcntCLIM = sum(c_across(starts_with("CLIM")) > 50, na.rm = TRUE),
         GT_BAcnt = sum(c_across(starts_with("GT_BA")), na.rm = TRUE),
         GTnonBAcntEXP = sum(c_across(starts_with("nonEXP")), na.rm = TRUE),
         GTnonBAcntEFFCT = sum(c_across(starts_with("nonEFFCT")), na.rm = TRUE),
         GTnonBAcntSP = sum(c_across(starts_with("nonSP")), na.rm = TRUE),
         GTnonBAcntSE = sum(c_across(starts_with("nonSE")), na.rm = TRUE),
         GTnonBAcntCLIM = sum(c_across(starts_with("nonCLIM")), na.rm = TRUE),
         GTnonBAcnt = sum(c_across(starts_with("GTnonBA")), na.rm = TRUE)) %>% 
  ungroup()

# load project shapefile and create 1/4 mile buffer
SRT <- st_read("data/Sudbury_rail_rte.shp", quiet = TRUE) %>% 
  st_make_valid()

# create 1/4 mile buffer around project
SRTbuff <- st_buffer(SRT, dist = 402.3, 
                     bOnlyEdges = FALSE, 
                     endCapStyle = "ROUND", 
                     singleSide = FALSE) %>% 
  st_make_valid()

# creat version of SRT in same CRS as MES for mapping
SRTwgs <- st_transform(SRT, crs = st_crs(MES))
SRTbuff <- st_transform(SRTbuff, crs = st_crs(MES))

# Identify BGs that intersect with buffer
BGs <- MES %>% 
  st_filter(SRTbuff, .predicate = st_intersects)

# Isolate intersecting block groups that are UBA
UBAbgs <- BGs %>% 
  filter(UBA == "Yes")

# Map the project SGA and block groups
# create popup
BGpopup <- paste0(BGs$NAME, "<br/>",
                      "<b>Town:</b> ", BGs$COSUB, "<br/>",
                      BGs$popMES, round(BGs$MassEnviroScore,1), "<br/>",
                      "<b>Burdened Area? </b>", BGs$UBA,"<br/>",
                      "<b>Minority: </b>", paste0(round(BGs$minorityPctE,1),"%"),"<br/>",
                      BGs$popMHI, if_else(!is.na(BGs$medHHincE), paste0("$",formatC(BGs$medHHincE, format = "d", big.mark=",")), "NA"),"<br/>",
                      BGs$popLEP, paste0(round(BGs$limitEngpctE,1)),"%", "<br/>",
                     BGs$popLAR, BGs$LARName, "<br/>",
                     "<b>Health Indicators (% of State Avg):</b>", "<br/>",
                     BGs$popASTHMA, paste0(round(BGs$pedAsthmaPctSt,1),"%"), "<br/>",
                     BGs$popBLL, if_else(!is.na(BGs$BLLPctSt), paste0(round(BGs$BLLPctSt,1),"%"), "NA"), "<br/>",
                     BGs$popLBW, if_else(!is.na(BGs$LBWPctSt), paste0(round(BGs$LBWPctSt,1),"%"), "NA"), "<br/>",
                     BGs$popPMR, if_else(!is.na(BGs$PMRPctSt), paste0(round(BGs$PMRPctSt,1),"%"), "NA"), "<br/>"
                     )

# repeat for UBA
UBAbgpopup <- paste0(UBAbgs$NAME, "<br/>",
                      "<b>Town:</b> ", UBAbgs$COSUB, "<br/>",
                      UBAbgs$popMES, round(UBAbgs$MassEnviroScore,1), "<br/>",
                      "<b>Burdened Area? </b>", UBAbgs$UBA,"<br/>",
                      "<b>Minority: </b>", paste0(round(UBAbgs$minorityPctE,1),"%"),"<br/>",
                      UBAbgs$popMHI, if_else(!is.na(UBAbgs$medHHincE), paste0("$",formatC(UBAbgs$medHHincE, format = "d", big.mark=",")), "NA"),"<br/>",
                      UBAbgs$popLEP, paste0(round(UBAbgs$limitEngpctE,1)),"%", "<br/>",
                     UBAbgs$popLAR, UBAbgs$LARName, "<br/>",
                     "<b>Health Indicators (% of State Avg):</b>", "<br/>",
                     UBAbgs$popASTHMA, paste0(round(UBAbgs$pedAsthmaPctSt,1),"%"), "<br/>",
                     UBAbgs$popBLL, if_else(!is.na(UBAbgs$BLLPctSt), paste0(round(UBAbgs$BLLPctSt,1),"%"), "NA"), "<br/>",
                     UBAbgs$popLBW, if_else(!is.na(UBAbgs$LBWPctSt), paste0(round(UBAbgs$LBWPctSt,1),"%"), "NA"), "<br/>",
                     UBAbgs$popPMR, if_else(!is.na(UBAbgs$PMRPctSt), paste0(round(UBAbgs$PMRPctSt,1),"%"), "NA"), "<br/>"
                     )

# map out transmission line over block groups
leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(-71.473858, 42.384783, 12) %>%
  addPolygons(data = SRTbuff,
              weight = 1,
              opacity = 1,
              color = "blue", 
              fill = TRUE,
              fillColor = "blue",
              fillOpacity = 0.3) %>% 
  addPolylines(data = SRTwgs,
               weight = 4,
               opacity = .7,
               color = "black") %>% 
  addPolygons(data = BGs,
              weight = 2,
              opacity = .7,
              color = "orange",
              fill = TRUE,
              fillOpacity = 0,
              dashArray = "3",
              highlightOptions = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0,
                bringToFront = TRUE),
              label = ~NAME2, 
              popup = BGpopup) %>% 
    addPolygons(data = UBAbgs,
              weight = 0.7,
              opacity = 1,
              color = "yellow",
              fill = TRUE,
              fillColor = "red",
              fillOpacity = 0.5,
              dashArray = "3",
              highlightOptions = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = ~NAME2,
              popup = UBAbgpopup)
```

@fig-sga shows that the SGA of the Sudbury-Hudson transmission line intersects with `{r} nrow(BGs)` census block groups, including `{r} nrow(UBAbgs)` block group designated as BA. Based on guidance, the project would require a CIA. 


### Step 3. Catalog Indicators within SGA

Using data from [MassEnviroScreen](https://profluna.github.io/MassEnviroScreen/), the project applicant must document the values of all the indicators which inform the cumulative impact score. They must highlight all current indicators which exceed the 50th percentile for the specific indicator. This comprehensive inventory establishes the baseline conditions that will be used to assess the project’s incremental impact.

@tbl-bgs shows the MassEnviroScreen indicator values for the Burdened Area within the SGA. Items in red exceed either the statewide 50th percentile, or the 50th percentile for non-Burdened Areas. 

```{r}
#| echo: false
#| warning: false
#| label: tbl-bgs

# create table showing raw values and percentiles for BA
# select relevant variables
indiRaw <- UBAbgs %>% 
  st_drop_geometry() %>% 
  select(PM25, EXPpctilePM25, OZONE, EXPpctileOZONE, DSLPM, EXPpctileDSLPM, NO2, EXPpctileNO2, PTRAF, EXPpctilePTRAF, DWATER, EXPpctileDWATER, CancerRisk, EXPpctileCancerRisk, `Respiratory HI`, EXPpctileRespHI, cleanup_score, EFFCTpctileCleanup, gwater_score, EFFCTpctileGrndWater, BWPScore, EFFCTpctileBWPMAJOR_PT, SWScore, EFFCTpctileSW, IL_count, EFFCTpctileIL, `High blood pressure among adults`, SPpctileHPRSSR, `Coronary heart disease among adults`, SPpctileHRTDIS, `Chronic obstructive pulmonary disease among adults`, SPpctileCOPD, `Cancer (non-skin) or melanoma among adults`, SPpctileCANCER, pedAsthmaPrevalence, SPpctileAsthmaPed, BLL, SPpctileBLL, LBW, SPpctileLBW, PMR, SPpctilePMR, HSlesspctE, SEpctileHS, hhburden, SEpctileHHB, limitEngpctE, SEpctileLEP, povHHpctE, SEpctilePOV, unemploypctE, SEpctileEMP, droughtSum, CLIMpctilDrought, WHPmean, CLIMpctilWHP, pctFldArea, CLIMpctilFLD, Heatmean, CLIMpctilHEAT) %>% 
  select(-starts_with("EXP"), -starts_with("EFFCT"), -starts_with("SP"), -starts_with("SE"), 
         -starts_with("CLIM")) %>% 
  pivot_longer(cols = everything(), names_to = "indicator", values_to = "RawValue")

# select only percentile 
indiNorm <- UBAbgs %>% 
  st_drop_geometry() %>% 
  select(starts_with("EXP"), starts_with("EFFCT"), starts_with("SP"), starts_with("SE"), 
         starts_with("CLIM")) %>% 
  pivot_longer(cols = everything(), names_to = "indicator", values_to = "Percentile")

# # select non-UBA flags
# indiNonFlag <- UBAbgs %>% 
#   st_drop_geometry() %>% 
#   select(starts_with("nonEXP"), starts_with("nonEFFCT"), starts_with("nonSP"), 
#          starts_with("nonSE"), starts_with("nonCLIM")) %>% 
#   pivot_longer(cols = everything(), names_to = "indicator", values_to = "nonBAflag") %>% 
#   mutate(nonBAflag = if_else(nonBAflag == 1, "Yes", "No"))

# compute non-BA percentiles, including UBAbgs
nonBApctile <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "No") %>% 
  select(UBA, PM25, OZONE, DSLPM, NO2, PTRAF, DWATER, CancerRisk, `Respiratory HI`, 
         cleanup_score, gwater_score, BWPScore, SWScore, IL_count, 
         `High blood pressure among adults`, `Coronary heart disease among adults`, 
         `Chronic obstructive pulmonary disease among adults`, 
         `Cancer (non-skin) or melanoma among adults`, pedAsthmaPrevalence, BLL, 
         LBW, PMR, HSlesspctE, hhburden, limitEngpctE, povHHpctE, unemploypctE, 
         droughtSum, WHPmean, pctFldArea, Heatmean) %>% 
  bind_rows(select(st_drop_geometry(UBAbgs), names(.)), .) %>% 
  mutate(across(.cols = -UBA, ~ percent_rank(.x)*100, .names = "pctile{.col}"))

# isolate UBA with nonUBA percentiles
BAnonBApctile <- nonBApctile %>% 
  filter(UBA == "Yes") %>% 
  select(starts_with("pctile")) %>% 
  pivot_longer(cols = everything(), names_to = "indicator", values_to = "PercentileNBA")

# put table together
BAscores <- bind_cols(indiRaw, select(indiNorm, Percentile)) %>% 
  bind_cols(., select(BAnonBApctile, PercentileNBA)) %>% 
  mutate(RawValue = round(RawValue,2),
         Percentile = round(Percentile,1),
         PercentileNBA = round(PercentileNBA,1)) %>% 
  mutate(Percentile = cell_spec(Percentile, color = case_when(
    Percentile > 50 ~ "red",
    .default = "black")),
    # nonBAflag = cell_spec(nonBAflag, color = case_when(
    #   nonBAflag == "Yes" ~ "red",
    #   .default = "black")),
    PercentileNBA = cell_spec(PercentileNBA, color = case_when(
    PercentileNBA > 50 ~ "red",
    .default = "black")))

BAscores %>% 
  kbl("html", escape = FALSE, 
      caption = "MassEnviroScreen Indicators for Burdened Area within SGA", 
      col.names = c("Indicator", "Raw Value", "Statewide Percentile", 
                    "non-Burdened Area Percentile")) %>% 
  kable_styling() %>% 
  scroll_box(width = "100%", height = "500px")
```


### Step 4. Identify Impacts on Key Indicators

Using the list of relevant, technology-specific indicators established by the EFSB, the project applicant must assess and document the anticipated impact of the proposed project on each indicator within the SGA. The project applicant must determine whether the project will exacerbate any indicator that already exceeds the 50th percentile statewide threshold or cause any additional indicator to exceed the 50th percentile threshold. If either condition is met, the impact is considered a disproportionate adverse effect for that indicator.

@tbl-kpi below lists the key indicators by technology type as identified by the EFSB.

```{r}
#| echo: false
#| warning: false
#| label: tbl-kpi

library(readxl)

read_xlsx("data/CIA Indicators by Technology 08-01-25.xlsx", 
                 sheet = "Cumul Ind by E-Tech", skip = 6) %>% 
  filter(!is.na(`Impact Category`) & `Impact Category` != "Site Suitability") %>% 
  select(-`Comments (Rationale for Inclusion)`) %>% 
  kbl("html", escape = FALSE, 
      caption = "Key Indicators by Technology Type", 
      col.names = c("Impact Category", "Sub-Category", "Indicator", 
                    "Clean Transmission and Distribution", "Clean Energy Generation",
                    "Clean Energy Storage", "Fossil Fuel (Legacy Facilities) - All Types")) %>% 
  kable_styling() %>% 
  scroll_box(width = "100%", height = "500px")
```

In the absence of accepted methods for estimating or modeling expected impacts on key indicators, one way of quantifying the level of potential impact is to use expert judgment as exemplified by the Project Impact Factor (PIF) proposed by EFSB. At its broadest level, the PIF strategy conceptualizes impacts on a continuum, ranging from "major burdens" to "no discernible impact" to "major benefits." These impacts are compensable, such that benefits can mathematically offset burdens, and vice versa. This approach can be further subdivided into two phases: the construction phase and the operation phase. The operation phase is weighted more heavily because the effects endure over a longer time period. While the determination of level of impact (e.g., "moderate" or "major" burden) should be based on expert judgment, the numerical value assigned to a given level of impact is essentially arbitrary. However, given the four levels of impact proposed by EFSB, a logical approach to quantification would be to use quartiles - 1, 0.75, 0.5, and 0.25. If the construction phase is conceived as having half the impact of the operation phase, these quartile values can be broken into complementary values, such that the construction phase value is half that of the operation phase value, and the sum of both equals the respective quartile. To achieve this, Construction phase values are computed as 1/3 of the quartile values for a given level, and Operation phase values are computed as 2/3 of the quartile value for a given level. The latter ensure that the construction phase values are one-half that of the operation phase values, and the sum of these complementary values adds up to the quartile value of a given level (see @tbl-impact). 

phaseC = 1/3 * quartile level value

phaseO = 2/3 * quartile level value

phaseC + phaseO = quartile value

```{r}
#| echo: false
#| warning: false
#| label: tbl-impact

# table illustrating concept of PIF by quartiles with half-weighting for construction phase
data.frame(impact = c("Major Benefits", "Moderate Benefits", "Minor Benefits", 
                      "Negligible Benefits", "No Discernible Project Benefits or Burdens", 
                      "Negligible Burdens", "Minor Burdens","Moderate Burdens", "Major Burdens"),
phaseC = c(rev(round(seq(from = 0.25, to = 1, by = 0.25)*(1/3),2)*-1), 0, 
           round(seq(from = 0.25, to = 1, by = 0.25)*(1/3),2)), 
phaseO = c(rev(round(seq(from = 0.25, to = 1, by = 0.25)*(2/3),2)*-1), 0, 
           round(seq(from = 0.25, to = 1, by = 0.25)*(2/3),2))) %>% 
  mutate(qsum = phaseC+phaseO) %>% 
  kbl("html", escape = FALSE, 
      caption = "Key Indicator Impact Levels", 
      col.names = c("Impact Level", "Construction Phase", "Operation Phase", "Quartile Sum")) %>%
  kable_styling()
```

According to OEJE guidance, "A disproportionate adverse effect occurs when the project exacerbates already high-impact indicators or pushes others beyond critical thresholds." This statement can be interpreted to mean the following:

1. If a project adds to a burden that is already above the critical threshold in a Burdened Area (e.g., 50th percentile), it is by definition exacerbating an already high-impact indicator - a disproportionate adverse effect
2. If a project pushes or raises an indicator beyond a critical threshold in a Burdened Area (e.g., 50th percentile), it creates a disproportionate adverse effect

Item 1 is essentially a threshold situation. Adding burden to an indicator that already exceeds the critical threshold in a Burdened Area is ipso facto a disproportionate adverse effect. In other words, the project is adding inequitable levels of burden on a key indicator to an already overburdened community. If we are reluctant to accept such trigger, we could declare that impacts must have a "minor" or greater burden to trigger such a determination. 

Item 2 is more complicated. How do we quantify the incremental impact of a burden in terms of comparative percentiles? If we build on our quartile logic, we could assume that a negligible burden increases the percentile value by up to 2.5%, minor burden by up to 5%, moderate burden by up to 7.5%, and major burden by up to 10% - essentially multiplying the quartiles by 10. 

@tbl-pifscores below shows the relative impacts on key indicators for the Sudbury Hudson transmission line project using the above logic. These are a subset of the identified key indicators for a transmission project for illustration purposes. Raw values for the indicators, as well as percentile values - statewide and relative to non-Burdened Areas - are shown as well. The latter are highlighted in red if they exceed the 50th percentile. Project Impact Factors (PIFs) for the construction and operation phases, as well as the sum of these, are shown for each indicator, based on EFSB modeling. Note, however, that the PIF values have been modified to be on a quartile basis. Finally, the last column showing PIF Level indicates the overall level of impact. Items highlighted in read indicate a potential "disproportionate adverse effect" because there is negligible or greater impact on an indicator that was already above the 50th percentile for non-Burdened Areas. 

```{r}
#| echo: false
#| warning: false
#| label: tbl-pifscores

# table showing application of quartile impact calculations on BA
# key indicators, statewide median, non-BA median, aggregate impact level, DAE (state)?, DAE (non-BA)
# use PIF values from EFSB
PIF <- c("PM25", "DSLPM", "DWATER", "PTRAF", "CancerRisk", "BWPScore", "cleanup_score", "WHPmean", "pctFldArea", "Heatmean")
cPIF <- c(.08, .08, .08, .08, .17, .17, .17, .17, 0, .08)
oPIF <- c(.17, .17, -.33, .17, 0, 0, -.17, 0, 0, .17)
PIFscores <- data.frame(PIF, cPIF, oPIF) %>% 
  mutate(PIFsum = cPIF+oPIF,
         PIFlevel = case_when(
           PIFsum < -.75 ~ "Major Benefits",
           PIFsum < -.5 & PIFsum >= -.75 ~ "Moderate Benefits",
           PIFsum < -.25 & PIFsum > -.5 ~ "Minor Benefits",
           PIFsum < 0 & PIFsum >= -.25 ~ "Negligible Benefits",
           PIFsum == 0 ~ "No Discernible Impact",
           PIFsum > 0 & PIFsum <= .25 ~ "Negligible Burdens",
           PIFsum > .25 & PIFsum <= .5 ~ "Minor Burdens",
           PIFsum > .5 & PIFsum <= .75 ~ "Moderate Burdens",
           PIFsum > .75 ~ "Major Burdens"
         ))

# bring in BAscores and append PIF
BAscores %>% 
  inner_join(., PIFscores, by = c("indicator" = "PIF")) %>% 
  mutate(PIFlevel = cell_spec(PIFlevel, color = case_when(
    PIFsum > 0 & str_detect(PercentileNBA,"red") ~ "red",
    .default = "black"))) %>% 
  kbl("html", escape = FALSE, 
      caption = "Estimated Project Impacts on Key Indicators", 
      col.names = c("Indicator", "Raw Value", "Statewide Percentile", 
                    "non-BA Percentile", "Construction PIF", "Operation PIF", "PIF Sum", "PIF Level")) %>% 
  kable_styling()
```

The precision of these values, or the PIF values on which they are based, should not be over interpreted. These values convey a relative impact, based on expert judgement. They are not a substitute for empirically derived values or modeled estimates of absolute impact, such as values derived from air dispersion modeling. As a result, the level of mitigation required for an impacted indicator must be determined in some alternative way. Equally important, the CIA process should allow for situations in which stakeholders can in fact produce empirically based estimates of absolute impacts for key indicators (e.g., PM25 in micrograms per cubic meter).  


### Sensitivity of Baseline Conditions

Following the proposed regulations by OEJE, there are two ways to set baseline conditions for determining a disproportionate adverse effect:

- comparison against the statewide 50th percentile for a given indicator
- comparison against the 50th percentile for non-Burdened Areas

We can explore the significance of these choices by looking at the frequency of 50th percentile exceedances for Burdened Areas in MassEnviroScreen. In other words, how often do Burdened Areas in MassEnviroScreen exceed the 50th percentile when the statewide baseline is used? How often do they exceed the 50th percentile when the baseline is based on non-Burdened Areas?

@tbl-baseline shows statistics on frequency of exceedances using these different baselines. Values indicate the number of exceedances by census block group. For example, using the statewide baseline, the smallest number of exceedances for a burdened area block group is 4 exceedances, and maximum is 27. In comparison, using the non-Burdened Area baseline, the smallest number of exceedances is 6, and the maximum is also 27. 

```{r}
#| echo: false
#| warning: false
#| label: tbl-baseline

# create table showing stats on frequency of exceedances based on benchmark
stateBM <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "Yes") %>% 
  summarise(across(GT_BAcnt, .fns = 
                   list(min = ~min(.x, na.rm = TRUE),
                        median = ~median(.x, na.rm = TRUE),
                        mean = ~mean(.x, na.rm = TRUE),
                        stdev = ~sd(.x, na.rm = TRUE),
                        q25 = ~quantile(., 0.25),
                        q75 = ~quantile(., 0.75),
                        max = ~max(.x, na.rm = TRUE)))) %>% 
  pivot_longer(everything(), names_sep='cnt_', names_to=c('variable', '.value')) %>% 
  pivot_longer(cols = min:max, names_to = "Statistic", values_to = "Statewide")

nonBABM <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "Yes") %>% 
  summarise(across(GTnonBAcnt, .fns = 
                     list(min = min,
                          median = median,
                          mean = mean,
                          stdev = sd,
                          q25 = ~quantile(., 0.25),
                          q75 = ~quantile(., 0.75),
                          max = max))) %>% 
  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value')) %>% 
  pivot_longer(cols = min:max, names_to = "Statistic", values_to = "nonBA")

# bring them together in table
bind_cols(select(stateBM, Statistic, Statewide), select(nonBABM, nonBA)) %>% 
  mutate(Statewide = round(Statewide, 1),
         nonBA = round(nonBA, 1)) %>% 
  kbl("html", escape = FALSE, 
      caption = "MassEnviroScreen Exceedances from Statewide versus non-Burdened Area Baselines", 
      col.names = c("Statistic", "Statewide","Non-Burdened Areas")) %>% 
  kable_styling()
```


We can also map the exceedances to explore whether there are significant differences in the geographic distribution of exceedances. 

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-baselines
#| eval: false

# create map with comparison of baseline choices
addLayersControl(
    # baseGroups are toggle radio buttons; only 1 at at time
    baseGroups = c("Unfairly Burdened Areas", "MassEnviroScore"),
    # overlayGroups are checkbox layers that can all be on or off
    overlayGroups = c("MA EJ Populations", "city/town boundary"),
    options = layersControlOptions(
      collapsed = FALSE,
      autoZIndex = TRUE)) %>% 
  hideGroup(c("MA EJ Populations", "city/town boundary")) %>% 
  addLegend(position = "bottomright",  
            colors = "red", 
            opacity = 0.5,
            title = "MassEnviroScreen",
            labels = "Unfairly Burdened Areas",
            layerId = "Unfairly Burdened Areas") %>% 
  addLegend(position = "bottomright",  
            pal = MESpal, 
            values = MassEnviroScreen$MassEnviroScore,
            opacity = 0.5,
            title = "MassEnviroScore",
            # labels = "MassEnviroScore",
            layerId = "MassEnviroScore") %>%
  addLegend(position = "bottomright",  
            colors = "gray", 
            opacity = 0.3,
            # title = "MA EJ Population",
            labels = "MA EJ Populations",
            group = "MA EJ Populations") %>% 
  addSearchOSM() %>% 
  # A hack to have the legends associated with radio-button "Base Groups" in R leaflet maps toggle along with layers. see https://gist.github.com/noamross/98c2053d81085517e686407096ec0a69
  htmlwidgets::onRender("
    function(el, x) {
      var initialLegend = 'Unfairly Burdened Areas' // Set the initial legend to be displayed by layerId
      var myMap = this;
      for (var legend in myMap.controls._controlsById) {
        var el = myMap.controls.get(legend.toString())._container;
        if(legend.toString() === initialLegend) {
          el.style.display = 'block';
        } else {
          el.style.display = 'none';
        };
      };
    myMap.on('baselayerchange',
      function (layer) {
        for (var legend in myMap.controls._controlsById) {
          var el = myMap.controls.get(legend.toString())._container;
          if(legend.toString() === layer.name) {
            el.style.display = 'block';
          } else {
            el.style.display = 'none';
          };
        };
      });
    }")
```

