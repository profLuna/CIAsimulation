---
title: "CIA Simulation - SudHud Transmission Line"
format: 
  html:
    toc: true
    toc-location: left
    embed-resources: true
    keep-md: true
---

## Introduction and Purpose

This document provides an analysis and simulation of the Cumulative Impact Analysis (CIA) process for clean energy projects as proposed by the Office of Environmental Justice and Equity (OEJE). The simulation focuses on the Sudbbury-Hudson underground transmission line to illustrate the steps in the CIA process and output generated. The rest of the document proceeds stepwise through the CIA process as described by OEJE. 

### Step 1. Identify Specific Geographic Area (SGA) of Project

The first step is to identify the Specific Geographic Area (SGA) of the proposed project. The SGA of a project is defined by the geographic location of the project and its physical footprint, as well as a radius around the project determined by the Energy Facilities Siting Board (EFSB). @tbl-sga below describes the radii of different energy technologies subject to review for CIA.

```{r}
#| echo: false
#| warning: false
#| label: tbl-sga

library(tidyverse)
library(kableExtra)
# create table
data.frame(Technology = c("Transmission and Distribution Lines", "Battery Energy Storage System", 
                          "Substation", "Ground-Mounted PV", 
                          "Onshore Wind Facility/ Anaerobic Digester > 25MW", "LNG Facility", 
                          "Pipeline", "Fossil Generating Facility", "Compressor Stations"),
           Radius = c("1/4 mile", "1 mile", "1/2 mile", "1/2 mile", "1 mile", "1 mile (no Air permit)<br>2 miles (non-Major Air)", "1/2 mile", "2 miles (non-Major)<br>5 miles (Major)", "1 mile (no Air permit)<br>2 miles (non-Major Air)"),
           Rationale = c("Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations", "Construction and visual impacts attenuate beyond this radius; emergency response considerations")) %>% 
  kbl("html", escape = FALSE, 
      caption = "Specific Geographic Areas for CIA in EFSB Reviews", 
      col.names = c("Energy Technology", "Proposed SGA Radius", "Rationale")) %>% 
  kable_styling()
```

The Sudbury-Hudson project was an underground transmission line, which would require a 1/4 mile radius around that project.


### Step 2. Determine if SGA Overlaps with BA

To determine if the Sudbury-Hudson project is within or near a BA, we examine whether the SGA (including a buffer of the specified radius) overlaps or intersects with "Burdened Areas" (BAs) as identified by the [MassEnviroScreen tool](https://profluna.github.io/MassEnviroScreen/). @fig-sga below is an interactive map showing the transmission line, a 1/4 mile buffer, and the census block groups that intersect with that 1/4 mile buffer. The block group highlighted in red is a BA. 

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-sga

# read in libraries
pacman::p_load(sf, tigris, leaflet, leaflet.extras, leaflet.providers)
options(tigris_use_cache = TRUE)

# don't use spherical calculations
sf_use_s2(FALSE)

# load MassEnviroScreen data 
MES <- readRDS("../MassEnviroScreen/MassEnviroScreen.rds") %>% 
  replace_na(list(UBA = "No")) %>% 
  mutate(NAME2 = paste0(str_remove(NAME, ", Middlesex County"),", ", COSUB))

# Set flag for indicators that exceed statewide median, as well as median of non-UBAs, in UBAs
# Want a count of how many indicators exceed these thresholds, possibly summarized by BG, as well as by indicator
nonBA50th <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "No") %>% 
  summarize(across(c(PM25, OZONE, DSLPM, NO2, PTRAF, DWATER, CancerRisk, `Respiratory HI`, 
                     cleanup_score, gwater_score, BWPScore, SWScore, IL_count, 
                     `High blood pressure among adults`, `Coronary heart disease among adults`, 
                     `Chronic obstructive pulmonary disease among adults`, 
                     `Cancer (non-skin) or melanoma among adults`, pedAsthmaPrevalence, BLL, 
                     LBW, PMR, HSlesspctE, hhburden, limitEngpctE, povHHpctE, unemploypctE, 
                     droughtSum, WHPmean, pctFldArea, Heatmean), 
                   ~ median(.x, na.rm = TRUE)))
# Add variables with flags for those exceeding non-UBA median
MES <- MES %>% 
  mutate(nonEXPpctilePM25 = if_else(PM25 > nonBA50th[1,"PM25"], 1, 0),
         nonEXPpctileOZONE = if_else(OZONE > nonBA50th[1,"OZONE"], 1, 0),
         nonEXPpctileDSLPM = if_else(DSLPM > nonBA50th[1,"DSLPM"], 1, 0),
         nonEXPpctileNO2 = if_else(NO2 > nonBA50th[1,"NO2"], 1, 0),
         nonEXPpctilePTRAF = if_else(PTRAF > nonBA50th[1,"PTRAF"], 1, 0),
         nonEXPpctileDWATER = if_else(DWATER > nonBA50th[1,"DWATER"], 1, 0),
         nonEXPpctileCancerRisk = if_else(CancerRisk > nonBA50th[1,"CancerRisk"], 1, 0),
         nonEXPpctileRespHI = if_else(`Respiratory HI` > nonBA50th[1,"Respiratory HI"], 1, 0),
         nonEFFCTpctileCleanup = if_else(cleanup_score > nonBA50th[1,"cleanup_score"], 1, 0),
         nonEFFCTpctileGrndWater = if_else(gwater_score > nonBA50th[1,"gwater_score"], 1, 0),
         nonEFFCTpctileBWPMAJOR_PT = if_else(BWPScore > nonBA50th[1,"BWPScore"], 1, 0),
         nonEFFCTpctileSW = if_else(SWScore > nonBA50th[1,"SWScore"], 1, 0),
         nonEFFCTpctileIL = if_else(IL_count > nonBA50th[1,"IL_count"], 1, 0),
         nonSPpctileHPRSSR = if_else(`High blood pressure among adults` > nonBA50th[1,"High blood pressure among adults"], 1, 0),
         nonSPpctileHRTDIS = if_else(`Coronary heart disease among adults` > nonBA50th[1,"Coronary heart disease among adults"], 1, 0),
         nonSPpctileCOPD = if_else(`Chronic obstructive pulmonary disease among adults` > nonBA50th[1,"Chronic obstructive pulmonary disease among adults"], 1, 0),
         nonSPpctileCANCER = if_else(`Cancer (non-skin) or melanoma among adults` > nonBA50th[1,"Cancer (non-skin) or melanoma among adults"], 1, 0),
         nonSPpctileAsthmaPed = if_else(pedAsthmaPrevalence > nonBA50th[1,"pedAsthmaPrevalence"], 1, 0),
         nonSPpctileBLL = if_else(BLL > nonBA50th[1,"BLL"], 1, 0),
         nonSPpctileLBW = if_else(LBW > nonBA50th[1,"LBW"], 1, 0),
         nonSPpctilePMR = if_else(PMR > nonBA50th[1,"PMR"], 1, 0),
         nonSEpctileHS = if_else(HSlesspctE > nonBA50th[1,"HSlesspctE"], 1, 0),
         nonSEpctileHHB = if_else(hhburden > nonBA50th[1,"hhburden"], 1, 0),
         nonSEpctileLEP = if_else(limitEngpctE > nonBA50th[1,"limitEngpctE"], 1, 0),
         nonSEpctilePOV = if_else(povHHpctE > nonBA50th[1,"povHHpctE"], 1, 0),
         nonSEpctileEMP = if_else(unemploypctE > nonBA50th[1,"unemploypctE"], 1, 0),
         nonCLIMpctilDrought = if_else(droughtSum > nonBA50th[1,"droughtSum"], 1, 0),
         nonCLIMpctilWHP = if_else(WHPmean > nonBA50th[1,"WHPmean"], 1, 0),
         nonCLIMpctilFLD = if_else(pctFldArea > nonBA50th[1,"pctFldArea"], 1, 0),
         nonCLIMpctilHEAT = if_else(Heatmean > nonBA50th[1,"Heatmean"], 1, 0)) %>% 
  rowwise() %>% 
  mutate(GT_BAcntEXP = sum(c_across(starts_with("EXP")) > 50, na.rm = TRUE),
         GT_BAcntEFFCT = sum(c_across(starts_with("EFFCT")) > 50, na.rm = TRUE),
         GT_BAcntSP = sum(c_across(starts_with("SP")) > 50, na.rm = TRUE),
         GT_BAcntSE = sum(c_across(starts_with("SE")) > 50, na.rm = TRUE),
         GT_BAcntCLIM = sum(c_across(starts_with("CLIM")) > 50, na.rm = TRUE),
         GT_BAcnt = sum(c_across(starts_with("GT_BA")), na.rm = TRUE),
         GTnonBAcntEXP = sum(c_across(starts_with("nonEXP")), na.rm = TRUE),
         GTnonBAcntEFFCT = sum(c_across(starts_with("nonEFFCT")), na.rm = TRUE),
         GTnonBAcntSP = sum(c_across(starts_with("nonSP")), na.rm = TRUE),
         GTnonBAcntSE = sum(c_across(starts_with("nonSE")), na.rm = TRUE),
         GTnonBAcntCLIM = sum(c_across(starts_with("nonCLIM")), na.rm = TRUE),
         GTnonBAcnt = sum(c_across(starts_with("GTnonBA")), na.rm = TRUE)) %>% 
  ungroup()

# load project shapefile and create 1/4 mile buffer
SRT <- st_read("data/Sudbury_rail_rte.shp", quiet = TRUE) %>% 
  st_make_valid()

# create 1/4 mile buffer around project
SRTbuff <- st_buffer(SRT, dist = 402.3, 
                     bOnlyEdges = FALSE, 
                     endCapStyle = "ROUND", 
                     singleSide = FALSE) %>% 
  st_make_valid()

# creat version of SRT in same CRS as MES for mapping
SRTwgs <- st_transform(SRT, crs = st_crs(MES))
SRTbuff <- st_transform(SRTbuff, crs = st_crs(MES))

# Identify BGs that intersect with buffer
BGs <- MES %>% 
  st_filter(SRTbuff, .predicate = st_intersects)

# Isolate intersecting block groups that are UBA
UBAbgs <- BGs %>% 
  filter(UBA == "Yes")

# Map the project SGA and block groups
# create popup
BGpopup <- paste0(BGs$NAME, "<br/>",
                      "<b>Town:</b> ", BGs$COSUB, "<br/>",
                      BGs$popMES, round(BGs$MassEnviroScore,1), "<br/>",
                      "<b>Burdened Area? </b>", BGs$UBA,"<br/>",
                      "<b>Minority: </b>", paste0(round(BGs$minorityPctE,1),"%"),"<br/>",
                      BGs$popMHI, if_else(!is.na(BGs$medHHincE), paste0("$",formatC(BGs$medHHincE, format = "d", big.mark=",")), "NA"),"<br/>",
                      BGs$popLEP, paste0(round(BGs$limitEngpctE,1)),"%", "<br/>",
                     BGs$popLAR, BGs$LARName, "<br/>",
                     "<b>Health Indicators (% of State Avg):</b>", "<br/>",
                     BGs$popASTHMA, paste0(round(BGs$pedAsthmaPctSt,1),"%"), "<br/>",
                     BGs$popBLL, if_else(!is.na(BGs$BLLPctSt), paste0(round(BGs$BLLPctSt,1),"%"), "NA"), "<br/>",
                     BGs$popLBW, if_else(!is.na(BGs$LBWPctSt), paste0(round(BGs$LBWPctSt,1),"%"), "NA"), "<br/>",
                     BGs$popPMR, if_else(!is.na(BGs$PMRPctSt), paste0(round(BGs$PMRPctSt,1),"%"), "NA"), "<br/>"
                     )

# repeat for UBA
UBAbgpopup <- paste0(UBAbgs$NAME, "<br/>",
                      "<b>Town:</b> ", UBAbgs$COSUB, "<br/>",
                      UBAbgs$popMES, round(UBAbgs$MassEnviroScore,1), "<br/>",
                      "<b>Burdened Area? </b>", UBAbgs$UBA,"<br/>",
                      "<b>Minority: </b>", paste0(round(UBAbgs$minorityPctE,1),"%"),"<br/>",
                      UBAbgs$popMHI, if_else(!is.na(UBAbgs$medHHincE), paste0("$",formatC(UBAbgs$medHHincE, format = "d", big.mark=",")), "NA"),"<br/>",
                      UBAbgs$popLEP, paste0(round(UBAbgs$limitEngpctE,1)),"%", "<br/>",
                     UBAbgs$popLAR, UBAbgs$LARName, "<br/>",
                     "<b>Health Indicators (% of State Avg):</b>", "<br/>",
                     UBAbgs$popASTHMA, paste0(round(UBAbgs$pedAsthmaPctSt,1),"%"), "<br/>",
                     UBAbgs$popBLL, if_else(!is.na(UBAbgs$BLLPctSt), paste0(round(UBAbgs$BLLPctSt,1),"%"), "NA"), "<br/>",
                     UBAbgs$popLBW, if_else(!is.na(UBAbgs$LBWPctSt), paste0(round(UBAbgs$LBWPctSt,1),"%"), "NA"), "<br/>",
                     UBAbgs$popPMR, if_else(!is.na(UBAbgs$PMRPctSt), paste0(round(UBAbgs$PMRPctSt,1),"%"), "NA"), "<br/>"
                     )

# map out transmission line over block groups
leaflet() %>% 
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(-71.473858, 42.384783, 12) %>%
  addPolygons(data = SRTbuff,
              weight = 1,
              opacity = 1,
              color = "blue", 
              fill = TRUE,
              fillColor = "blue",
              fillOpacity = 0.3) %>% 
  addPolylines(data = SRTwgs,
               weight = 4,
               opacity = .7,
               color = "black") %>% 
  addPolygons(data = BGs,
              weight = 2,
              opacity = .7,
              color = "orange",
              fill = TRUE,
              fillOpacity = 0,
              dashArray = "3",
              highlightOptions = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0,
                bringToFront = TRUE),
              label = ~NAME2, 
              popup = BGpopup) %>% 
    addPolygons(data = UBAbgs,
              weight = 0.7,
              opacity = 1,
              color = "yellow",
              fill = TRUE,
              fillColor = "red",
              fillOpacity = 0.5,
              dashArray = "3",
              highlightOptions = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = ~NAME2,
              popup = UBAbgpopup)
```

@fig-sga shows that the SGA of the Sudbury-Hudson transmission line intersects with `{r} nrow(BGs)` census block groups, including `{r} nrow(UBAbgs)` block group designated as BA. Based on guidance, the project would require a CIA. 


### Step 3. Catalog Indicators within SGA

Using data from [MassEnviroScreen](https://profluna.github.io/MassEnviroScreen/), the project applicant must document the values of all the indicators which inform the cumulative impact score. They must highlight all current indicators which exceed the 50th percentile for the specific indicator. This comprehensive inventory establishes the baseline conditions that will be used to assess the project’s incremental impact.

@tbl-bgs shows the MassEnviroScreen indicator values for the Burdened Area within the SGA. Items in red exceed either the statewide 50th percentile, or the 50th percentile for non-Burdened Areas. 

```{r}
#| echo: false
#| warning: false
#| label: tbl-bgs

# create table showing raw values and percentiles for BA
# select relevant variables
indiRaw <- UBAbgs %>% 
  st_drop_geometry() %>% 
  select(PM25, EXPpctilePM25, OZONE, EXPpctileOZONE, DSLPM, EXPpctileDSLPM, NO2, EXPpctileNO2, PTRAF, EXPpctilePTRAF, DWATER, EXPpctileDWATER, CancerRisk, EXPpctileCancerRisk, `Respiratory HI`, EXPpctileRespHI, cleanup_score, EFFCTpctileCleanup, gwater_score, EFFCTpctileGrndWater, BWPScore, EFFCTpctileBWPMAJOR_PT, SWScore, EFFCTpctileSW, IL_count, EFFCTpctileIL, `High blood pressure among adults`, SPpctileHPRSSR, `Coronary heart disease among adults`, SPpctileHRTDIS, `Chronic obstructive pulmonary disease among adults`, SPpctileCOPD, `Cancer (non-skin) or melanoma among adults`, SPpctileCANCER, pedAsthmaPrevalence, SPpctileAsthmaPed, BLL, SPpctileBLL, LBW, SPpctileLBW, PMR, SPpctilePMR, HSlesspctE, SEpctileHS, hhburden, SEpctileHHB, limitEngpctE, SEpctileLEP, povHHpctE, SEpctilePOV, unemploypctE, SEpctileEMP, droughtSum, CLIMpctilDrought, WHPmean, CLIMpctilWHP, pctFldArea, CLIMpctilFLD, Heatmean, CLIMpctilHEAT) %>% 
  select(-starts_with("EXP"), -starts_with("EFFCT"), -starts_with("SP"), -starts_with("SE"), 
         -starts_with("CLIM")) %>% 
  pivot_longer(cols = everything(), names_to = "indicator", values_to = "RawValue")

# select only percentile 
indiNorm <- UBAbgs %>% 
  st_drop_geometry() %>% 
  select(starts_with("EXP"), starts_with("EFFCT"), starts_with("SP"), starts_with("SE"), 
         starts_with("CLIM")) %>% 
  pivot_longer(cols = everything(), names_to = "indicator", values_to = "Percentile")

# select non-UBA flags
indiNonFlag <- UBAbgs %>% 
  st_drop_geometry() %>% 
  select(starts_with("nonEXP"), starts_with("nonEFFCT"), starts_with("nonSP"), 
         starts_with("nonSE"), starts_with("nonCLIM")) %>% 
  pivot_longer(cols = everything(), names_to = "indicator", values_to = "nonBAflag") %>% 
  mutate(nonBAflag = if_else(nonBAflag == 1, "Yes", "No"))

bind_cols(indiRaw, select(indiNorm, Percentile)) %>% 
  bind_cols(., select(indiNonFlag, nonBAflag)) %>% 
  mutate(RawValue = round(RawValue,2),
         Percentile = round(Percentile,1)) %>% 
  mutate(Percentile = cell_spec(Percentile, color = case_when(
    Percentile > 50 ~ "red",
    .default = "black")),
    nonBAflag = cell_spec(nonBAflag, color = case_when(
      nonBAflag == "Yes" ~ "red",
      .default = "black"))) %>%
  kbl("html", escape = FALSE, 
      caption = "MassEnviroScreen Indicators for Burdened Area within SGA", 
      col.names = c("Indicator", "Raw Value", "Statewide Percentile", "Exceeds 50th Percentile for non-Burdened Areas?")) %>% 
  kable_styling() %>% 
  scroll_box(width = "100%", height = "500px")
```


### Step 4. Identify Impacts on Key Indicators

Using the list of relevant, technology-specific indicators established by the EFSB, the project applicant must assess and document the anticipated impact of the proposed project on each indicator within the SGA. The project applicant must determine whether the project will exacerbate any indicator that already exceeds the 50th percentile statewide threshold or cause any additional indicator to exceed the 50th percentile threshold. If either condition is met, the impact is considered a disproportionate adverse effect for that indicator.

@tbl-kpi below lists the key indicators by technology type as identified by the EFSB.

```{r}
#| echo: false
#| warning: false
#| label: tbl-kpi

library(readxl)

read_xlsx("data/CIA Indicators by Technology 08-01-25.xlsx", 
                 sheet = "Cumul Ind by E-Tech", skip = 6) %>% 
  filter(!is.na(`Impact Category`) & `Impact Category` != "Site Suitability") %>% 
  select(-`Comments (Rationale for Inclusion)`) %>% 
  kbl("html", escape = FALSE, 
      caption = "Key Indicators by Technology Type", 
      col.names = c("Impact Category", "Sub-Category", "Indicator", 
                    "Clean Transmission and Distribution", "Clean Energy Generation",
                    "Clean Energy Storage", "Fossil Fuel (Legacy Facilities) - All Types")) %>% 
  kable_styling() %>% 
  scroll_box(width = "100%", height = "500px")
```

QUESTIONS:

- How do we determine the level of anticipated impact on any indicator?
- How do we want to quantify that impact to determine if it creates a 


### Sensitivity of Baseline Conditions

Following the proposed regulations by OEJE, there are two ways to set baseline conditions for determining a disproportionate adverse effect:

- comparison against the statewide 50th percentile for a given indicator
- comparison against the 50th percentile for non-Burdened Areas

We can explore the significance of these choices by looking at the frequency of 50th percentile exceedances for Burdened Areas in MassEnviroScreen. In other words, how often do Burdened Areas in MassEnviroScreen exceed the 50th percentile when the statewide baseline is used? How often do they exceed the 50th percentile when the baseline is based on non-Burdened Areas?

@tbl-baseline shows statistics on frequency of exceedances using these different baselines. Values indicate the number of exceedances by census block group. For example, using the statewide baseline, the smallest number of exceedances for a burdened area block group is 4 exceedances, and maximum is 27. In comparison, using the non-Burdened Area baseline, the smallest number of exceedances is 6, and the maximum is also 27. 

```{r}
#| echo: false
#| warning: false
#| label: tbl-baseline

# create table showing stats on frequency of exceedances based on benchmark
stateBM <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "Yes") %>% 
  summarise(across(GT_BAcnt, .fns = 
                   list(min = ~min(.x, na.rm = TRUE),
                        median = ~median(.x, na.rm = TRUE),
                        mean = ~mean(.x, na.rm = TRUE),
                        stdev = ~sd(.x, na.rm = TRUE),
                        q25 = ~quantile(., 0.25),
                        q75 = ~quantile(., 0.75),
                        max = ~max(.x, na.rm = TRUE)))) %>% 
  pivot_longer(everything(), names_sep='cnt_', names_to=c('variable', '.value')) %>% 
  pivot_longer(cols = min:max, names_to = "Statistic", values_to = "Statewide")

nonBABM <- MES %>% 
  st_drop_geometry() %>% 
  filter(UBA == "Yes") %>% 
  summarise(across(GTnonBAcnt, .fns = 
                     list(min = min,
                          median = median,
                          mean = mean,
                          stdev = sd,
                          q25 = ~quantile(., 0.25),
                          q75 = ~quantile(., 0.75),
                          max = max))) %>% 
  pivot_longer(everything(), names_sep='_', names_to=c('variable', '.value')) %>% 
  pivot_longer(cols = min:max, names_to = "Statistic", values_to = "nonBA")

# bring them together in table
bind_cols(select(stateBM, Statistic, Statewide), select(nonBABM, nonBA)) %>% 
  mutate(Statewide = round(Statewide, 1),
         nonBA = round(nonBA, 1)) %>% 
  kbl("html", escape = FALSE, 
      caption = "MassEnviroScreen Exceedances from Statewide versus non-Burdened Area Baselines", 
      col.names = c("Statistic", "Statewide","Non-Burdened Areas")) %>% 
  kable_styling()
```


We can also map the exceedances to explore whethere there are significant differences in the geographic distribution of exceedances. 

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-baselines

# create map with comparison of baseline choices
addLayersControl(
    # baseGroups are toggle radio buttons; only 1 at at time
    baseGroups = c("Unfairly Burdened Areas", "MassEnviroScore"),
    # overlayGroups are checkbox layers that can all be on or off
    overlayGroups = c("MA EJ Populations", "city/town boundary"),
    options = layersControlOptions(
      collapsed = FALSE,
      autoZIndex = TRUE)) %>% 
  hideGroup(c("MA EJ Populations", "city/town boundary")) %>% 
  addLegend(position = "bottomright",  
            colors = "red", 
            opacity = 0.5,
            title = "MassEnviroScreen",
            labels = "Unfairly Burdened Areas",
            layerId = "Unfairly Burdened Areas") %>% 
  addLegend(position = "bottomright",  
            pal = MESpal, 
            values = MassEnviroScreen$MassEnviroScore,
            opacity = 0.5,
            title = "MassEnviroScore",
            # labels = "MassEnviroScore",
            layerId = "MassEnviroScore") %>%
  addLegend(position = "bottomright",  
            colors = "gray", 
            opacity = 0.3,
            # title = "MA EJ Population",
            labels = "MA EJ Populations",
            group = "MA EJ Populations") %>% 
  addSearchOSM() %>% 
  # A hack to have the legends associated with radio-button "Base Groups" in R leaflet maps toggle along with layers. see https://gist.github.com/noamross/98c2053d81085517e686407096ec0a69
  htmlwidgets::onRender("
    function(el, x) {
      var initialLegend = 'Unfairly Burdened Areas' // Set the initial legend to be displayed by layerId
      var myMap = this;
      for (var legend in myMap.controls._controlsById) {
        var el = myMap.controls.get(legend.toString())._container;
        if(legend.toString() === initialLegend) {
          el.style.display = 'block';
        } else {
          el.style.display = 'none';
        };
      };
    myMap.on('baselayerchange',
      function (layer) {
        for (var legend in myMap.controls._controlsById) {
          var el = myMap.controls.get(legend.toString())._container;
          if(legend.toString() === layer.name) {
            el.style.display = 'block';
          } else {
            el.style.display = 'none';
          };
        };
      });
    }")
```

